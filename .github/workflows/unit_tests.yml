name: Tests

on:
  workflow_dispatch:
  schedule:
    - cron: "0 8 * * 6"
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        python-version: [ 3.8, 3.9, '3.10', '3.11' , '3.12' ]

    steps:
      - name: Checkout bcolz-zipline
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}


      - name: Install c-blosc on Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install libblosc-dev liblz4-dev liblzma-dev libzstd-dev

      - name: Install c-blosc on macOS
        if: matrix.os == 'macos-latest'
        run: brew install c-blosc

      - name: Install c-blosc on Windows
        if: matrix.os == 'windows-latest'
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
          git clone https://github.com/Blosc/c-blosc.git
          cd c-blosc
          mkdir build
          cd build
          cmake ..
          cmake --build . --config Release
          cmake --install . --prefix "C:\Program Files\c-blosc"

      - name: Install bcolz
        run: |
          python -VV
          python -m pip install --upgrade pip wheel setuptools
          pip install  --no-binary :all: -e .[test]
        env:
          DISABLE_BCOLZ_AVX2: true

      - name: Check library versions and paths
        run: |
          ldconfig -p | grep lz4
          ldconfig -p | grep blosc
          ldconfig -p | grep lzma
          ldconfig -p | grep zstd

      - name: Check LZ4 library symbols
        run: |
          nm -D /usr/lib/x86_64-linux-gnu/liblz4.so | grep LZ4_compress_HC          

      - name: Run tests
        run: pytest --cov

      - name: Upload coverage data to coveralls.io
        run: coveralls --service=github
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
